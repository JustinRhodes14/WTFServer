Wheres the File? - Documentation for our git-like version control system

Authors: Justin Rhodes (jgr85) & Gregorio Fuerte (grf27)


GENERAL

For this project, we had to implement both a server and client to implement a version control system. The whole point of a version control system is that it allows multiple people to work on a single project all at once, sending many changes into the server, which would then update the version of the project and store it on the server side. Users are able to increment and update the project, but users are also able to revert a given project into whatever previous version they like, which allows for users to go back if they made mistakes or wish to continue from a previous version.

For this project, there were 3 big things we had to pay attention to and work with. A key part of this project was parsing through projects .Manifest files, which made it easier when comparing versions of projects to one another, allowing for easy updates. We formatted our .Manifest file as follows:



<Version Number>
<File version> <Code> <File-path> <Shacode/Delete indication>

For our codes, we used the following -> !RM = Removed, !AD = Added, !MD = Modified, !UT = Untracked

For the shacodes hash values, we used SHA256 hashing function in the openssl library, to represent files contents as hashed data. If a file were to be removed, in place of the shacode we would write DELETE, to indicate that the file was no longer part of hte project.

A sample .Manifest file is as follows:
3
3 !RM Test/dir1/t1.txt DELETE
3 !AD Test/t2.txt 49931c113d77347b317525a4705df58c342165700933f3f81d7b2fdcf6a545c9
2 !UT Test/t3.txt 49931c113d77391826477we678ty7a8stfdaas78td88f3f81d7b2fdcf6a545c9
3 !MD Test/t4.txt 49931c113d77347b31752iawohdioawhwahiuadoij39f3f81d7b2fdcf6a545c9



Since we formatted the Manifest file, it made it very easy to parse through and do proper comparisons when calling different commands from the client.

One of the other key things in this project was networking. Since we weree utilizing sockets to write and read data between server and client, we had to establish a connection between the two. Having sockets allowed for us to store the server contents in one place, and the client could interact with all the projects on the server however they want. In order to keep the server constantly running, we established it with 20 threads and had the accept call on loop so it would always be ready to accept new connections.

Lastly, another key concept in this proejct was threads and thread syncrhonization. Whenever the server recieved a connection request from the clientm the server would generate a thread that would handle that specific function call from the client. What's really good about this is that it allows for multipel clients to interact with the server at a time, to fulfill multiple different requests that don't interfere with one another. Which is why it was important to synchronize all threads, if a client was doing a key action to a project stored on the server, it would prevent another client from interacting with the same data to prevent error or mistakes on the client side. Below, we will discuss further how we properly synchronized the threads.


THREAD SYNCHRONIZATION - How we accomplished this

In order to handle threads, we start by creating an array of pthreads of size 20. When recieving a call from a client, the server will branch off into a new thread, which would then be taken to our main function (func) to handle each individual request from client to server. When the amount of pthreads approaches our limit, we join the threads together and reset the counter to allow the server to continue supporting multiple connections. We only set the size to 20 to promote better speed, rather than having unlimited threads running at once.

In order to prevent the threads from interacting with a shared resource from other threads, we used mutexexes. We had one mutex for the entire repository, which would lock the entire repository for certain functions such as create and destroy. We used trylock to detect whether or not the mutex was already locked, and then would use unlock when we were done handling repository sensitive data.

In regards to handling individual projects, we made a linked list of mutex nodes that held project names in them, whenever the user created a new project on the server, it would also initialize a new project mutex node that would be able to be locked and unlocked. Every time we read or write from a project, we would lock that specific project so no other threads could interfere with the data.

In order to avoid deadlocks within our project, we followed a strict lock unlock code, everytime we lock, we always unlock before exiting the thread, and ran through multiple test cases to check for this.



CONCLUSION

Overall, while this project came off as really intimidating, once we layed down a solid protocol and a solid plan, the code wasn't too bad since we had the advantage of formatting our messages and project files. In order to store and parse through the manifest, we made use of a hash table to store it's contents easily, as well as providing quick lookup for items from the .Manifest files.
