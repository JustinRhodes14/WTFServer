In order to run our WTFtest executable, simply call make, and then input the port number you wish to run the server on, an example of how to run it is shown below:

./WTFtest 9029 
--> This will run the server on port 9029

For running our tests, we used the chdir() function to change the working directory of the process, that way our test client would properly put files in the right spots upon testing them. In order to check our test, simply view the server folder to see server changes, and the client folder to see changes made on the client side.

For our test client, we went through a couple of the commands to showcase how it works. First we initialize the client by making a .configure file, and it properly writes the file into the client directory. Following this, we successfully establish a connection with the server and create a project called "destroyingu", immediately after creating the project, we call destroy and the server removes the project from it's repository. Following this, we create another project called "TestProject", where we then showcase the add and remove commands. We add 3 files, and remove 1 of the files from the project. Following this, we commit our changes to the server and the server acknowledges that it has successfully recieved our .Commit file. Following commit, we push our changes to the server, all changes are properly outputted to STDOUT, and changes are made as called to the server, and both the server and client manifest are updated along with the projects. After pushing, we call currentversion, and the server properly returns the currentversion of the project, along with all the files present in the servers .Manifest. Right after this, we remove the project from the client side, then call checkout, and the server properly clones the project into the client's repository. Following checkout, we call update on the server with the cloned repository, and the client properly prints out that it is "Up to Date", and makes an empty .Update file. Next, we call upgrade on the project, and it indicates that the .Update file is empty, and that the client is already up to date with the server. Lastly, we call history on the project, and it properly prints out all the changes made to the projects, (version number, code, filepath, and hash value). Next, we call rollback on the project, and the server successfully reverts TestProject to version 1 where we started.

After all this, we shut the server down and indicate that testing has been completed.
